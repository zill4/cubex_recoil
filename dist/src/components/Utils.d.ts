export type ExtendedFunction0<T> = (...args: any[]) => T;
export type ExtendedFunction1<T, U> = (arg0: T) => U;
export type ExtendedFunction2<T, U, V> = (arg0: T, arg1: U) => V;
export type ExtendedFunction3<T, U, V, W> = (arg0: T, arg1: U, arg2: V) => W;
export type ExtendedFunction4<T, U, V, W, X> = (arg0: T, arg1: U, arg2: V, arg3: W) => X;
export type ExtendedPromise0<T> = () => Promise<T>;
export type ExtendedPromise1<T, U> = (arg0: T) => Promise<U>;
export type ExtendedPromise2<T, U, V> = (arg0: T, arg1: U) => Promise<V>;
export type ExtendedPromise3<T, U, V, W> = (arg0: T, arg1: U, arg2: V) => Promise<W>;
export type ExtendedPromise4<T, U, V, W, X> = (arg0: T, arg1: U, arg2: V, arg3: W) => Promise<X>;
export declare function debounce<T>(func: ExtendedFunction0<T>, wait: number, immediate?: boolean): () => void;
export declare function debounce<T, U>(func: ExtendedFunction1<T, U>, wait: number, immediate?: boolean): (arg0: T) => void;
export declare function debounce<T, U, V>(func: ExtendedFunction2<T, U, V>, wait: number, immediate?: boolean): (arg0: T, arg1: U) => void;
export declare function debounce<T, U, V, W>(func: ExtendedFunction3<T, U, V, W>, wait: number, immediate?: boolean): (arg0: T, arg1: U, arg2: V) => void;
export declare function debounce<T, U, V, W, X>(func: ExtendedFunction4<T, U, V, W, X>, wait: number, immediate?: boolean): (arg0: T, arg1: U, arg2: V, arg3: W) => void;
export declare function debouncePromise<T>(func: ExtendedFunction0<T>, wait: number, thisArg?: any): ExtendedPromise0<T>;
export declare function debouncePromise<T, U>(func: ExtendedFunction1<T, U>, wait: number, thisArg?: any): ExtendedPromise1<T, U>;
export declare function debouncePromise<T, U, V>(func: ExtendedFunction2<T, U, V>, wait: number, thisArg?: any): ExtendedPromise2<T, U, V>;
export declare function debouncePromise<T, U, V, W>(func: ExtendedFunction3<T, U, V, W>, wait: number, thisArg?: any): ExtendedPromise3<T, U, V, W>;
export declare function debouncePromise<T, U, V, W, X>(func: ExtendedFunction4<T, U, V, W, X>, wait: number, thisArg?: any): ExtendedPromise4<T, U, V, W, X>;
export declare function branchIn(value: Array<any>, key: string, step?: number): any;
export declare function search(dataSource: Array<any>, term: string, keys: Array<any>, fn?: (dataSource?: Array<any>, term?: string, keys?: Array<string>) => void): void | Object[];
export declare function isType(value: any): any;
export declare function getType<T>(value: Array<T>): string;
export declare function arraysEqual(arr1: Array<Object>, arr2: Array<Object>): boolean;
